# -*- coding: utf-8 -*-
"""Fake_News_Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IDf-rUekW_XdLNr66JWGQh3fq_cgN81V
"""

import numpy as np
import pandas as pd
import nltk
import tensorflow as tf
nltk.download('stopwords')
import re
import string
from sklearn.model_selection import train_test_split
from tensorflow.keras.layers import Embedding
from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Sequential
from tensorflow.keras.preprocessing.text import one_hot
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.layers import LSTM
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.metrics import accuracy_score

data=pd.read_csv('FakeNewsNet.csv')
data
x=data.iloc[:,0].values
y=data.iloc[:,4].values
ps=PorterStemmer()
corpus=[]
for i in range(0,len(x)):
  review=re.sub('[^a-zA-Z]',' ',x[i])
  review=review.lower()
  review=review.split()
  review=[ps.stem(word) for word in review if word not in stopwords.words('english')]
  review=' '.join(review)
  corpus.append(review)

data

voc_size=5000
sent_len=20
one_hot_rep=[one_hot(words,voc_size) for words in corpus ]
one_hot_rep
embedded_seq=pad_sequences(one_hot_rep,maxlen=sent_len,padding='pre')

dim=40
model=Sequential()
model.add(Embedding(voc_size,dim,input_length=sent_len))
model.add(LSTM(50))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
model.summary()

X=np.array(embedded_seq)
Y=np.array(y)
x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.2,random_state=0)
early_stopping=tf.keras.callbacks.EarlyStopping(
    monitor="val_loss",
    min_delta=0.0001,
    patience=10,
    verbose=1,
    mode="auto",
    baseline=None,
    restore_best_weights=False,
    start_from_epoch=0,
)
model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=20,batch_size=70,callbacks=early_stopping)

y_pred=model.predict(x_test)
y_pred=(y_pred>=0.5)
accuracy_score(y_pred,y_test)